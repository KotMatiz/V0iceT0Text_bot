import requests
import whisper
import subprocess
import torch
import os
import telebot
from telebot import types
from concurrent.futures import ThreadPoolExecutor

bot = telebot.TeleBot('6867622191:AAEr1xMeD5MdQMQi2cEw-2piNCmcZN7tT-U')

executor = ThreadPoolExecutor(max_workers=4)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏


def save_audio_from_response(response, path='audio.mp3'):
    if response.status_code == 200:
        with open(path, 'wb') as file:
            file.write(response.content)


def transcribe_audio(path, model_size='medium'):
    device = torch.device("cpu")
    model = whisper.load_model(model_size)
    result = model.transcribe(path)
    return result["text"]


def process_audio(file_info, chat_id, processing_message_id):
    file_path = file_info.file_path
    url = f'https://api.telegram.org/file/bot{bot.token}/{file_path}'
    response = requests.get(url)
    audio_mp3_path = f'audio_{processing_message_id}.mp3'
    audio_wav_path = f'audio_{processing_message_id}.wav'

    save_audio_from_response(response, audio_mp3_path)

    if audio_mp3_path[-3:] != 'wav':
        subprocess.call(['ffmpeg', '-i', audio_mp3_path, audio_wav_path, '-y', '-loglevel', 'error'])

    transcript = transcribe_audio(audio_wav_path)
    cleanup_files(audio_wav_path, audio_mp3_path)

    bot.edit_message_text(chat_id=chat_id, message_id=processing_message_id, text=transcript)


def cleanup_files(*file_paths):
    for path in file_paths:
        if os.path.exists(path):
            os.remove(path)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("‚ùì –û –±–æ—Ç–µ")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     'üéôÔ∏è –ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò.\n\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!',
                     reply_markup=markup)


@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_message = bot.reply_to(message, "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
    processing_message_id = processing_message.message_id
    file_info = bot.get_file(message.voice.file_id)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    executor.submit(process_audio, file_info, message.chat.id, processing_message_id)


@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
        bot.send_message(message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –Ω–∞–¥–µ—é—Å—å —è —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å)")
    elif message.text == "‚ùì –û –±–æ—Ç–µ":
        bot.send_message(message.chat.id, text="–Ø –º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
